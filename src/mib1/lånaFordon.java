/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mib1;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import java.time.LocalDate;
/**
 *
 * @author KarlJ
 */
public class lånaFordon extends javax.swing.JFrame {
    
    private static InfDB idb;
    /**
     * Creates new form lånaFordonBTN
     */
    public lånaFordon(InfDB idb) {
        initComponents();
        this.idb = idb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbxBTN = new javax.swing.JButton();
        låna = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbxBTN.setText("Tillbaka");
        tbxBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxBTNActionPerformed(evt);
            }
        });

        låna.setText("Välj fordon");
        låna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lånaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(låna, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                    .addComponent(tbxBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(141, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(låna, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbxBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lånaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lånaActionPerformed
        // TODO add your handling code here:
        //Promptar användaren att svara ifall den vill låna fordon
        int inmatning = JOptionPane.showConfirmDialog(null, "Vill du låna ett fordon?", "Låna fordon", 2);
        //Hämtar in dagens datum så att det kan matas in i databasen under utkvitteringsdatum. Utkvitteringsdatum är alltid dagens datum på sättet vi gjort det
        LocalDate date = LocalDate.now();
        //Hämtar inloggad användare med hjälp av hamtaAnvandare metoden från huvudfönster
        String user = huvudFonster.hamtaAnvandare();
        //Skapar en arraylist med alla fordon
        ArrayList<String> fordon = new ArrayList<String>();
        //0 = att användaren tryck ja på om den vill låna fordon
        if(inmatning == 0){
            try{
                //Hämtar in fordonsmodellerna från fordontabellen
                 fordon = idb.fetchColumn("Select fordonsbeskrivning from fordon");
                 //Görs om till ett arrayobjekt
                 Object[] fordonObjekt = fordon.toArray();
                 //Användaren får välja vilket fordon den vill låna 
                 Object valtFordon = JOptionPane.showInputDialog(null, "Välj fordon", "", JOptionPane.QUESTION_MESSAGE, null, fordonObjekt, fordonObjekt[0]);
                 //Gör objektet till en string med det valda fordonet
                 String valtFordonToString = String.valueOf(valtFordon);
                 //Hämtar agent_id på inloggad användare
                 int convertId = Integer.parseInt(idb.fetchSingle("Select agent_id from agent where namn = " + "'" + user + "'"));
                 // Hämtar fordons_id på det fordonet som användaren valt
                 String valtFordonRegnr = idb.fetchSingle("Select fordons_id from fordon where fordonsbeskrivning = " + "'" + valtFordonToString + "'");
                 // För in värdena in i innehar_fordon
                idb.insert("INSERT INTO innehar_fordon VALUES ('" + convertId + "','" + valtFordonRegnr + "','" + date +  "')");
                 
               
                 
            
            }
            catch(InfException e){
            System.out.println(e.getMessage());
             System.out.println(date);
            }
            catch(NullPointerException e){
                System.out.println(e.getMessage());
                System.out.println(date);
            }
        
        }
        
        
    }//GEN-LAST:event_lånaActionPerformed

    private void tbxBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxBTNActionPerformed
        // TODO add your handling code here:
               // TODO add your handling code here:
          String test = huvudFonster.hamtaAnvandare();
        //om agenten är admin så kommer man till adminsidan via knappen annars så kommer man till vanliga agentsidan
        try{
            //String namn = idb.fetchSingle("Select namn from agent where namn = " + "'" + test + "'");
            // Här hämtar den id på den inloggade agenten
            String id = idb.fetchSingle("Select agent_id from agent where namn = " + "'" + test + "'");
            // Konverterar till int
            int convertId = Integer.parseInt(id);
            //If agenten är admin 
            String om = idb.fetchSingle("select agent.ADMINISTRATOR from agent where agent_id = " + "'" + convertId +"'");
            //Om villkorret uppfylls(en agent är admin om det står J i administrator kolumnen)
            if(om.equals("J")){
                AdminFonster tbxAdmin = new AdminFonster(idb);
                tbxAdmin.setVisible(true);
                this.dispose();
            }
            // Annars är det vanliga agentsidan man kommer till
            else{
                AgentInloggad tbx = new AgentInloggad(idb);
                tbx.setVisible(true);
                this.dispose();
                 
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_tbxBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(lånaFordon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(lånaFordon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(lånaFordon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(lånaFordon.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new lånaFordon(idb).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton låna;
    private javax.swing.JButton tbxBTN;
    // End of variables declaration//GEN-END:variables
}
