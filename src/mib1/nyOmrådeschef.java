/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mib1;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfDB;
import oru.inf.InfException;
/**
 *
 * @author KarlJ
 */
public class nyOmrådeschef extends javax.swing.JFrame {
        private static InfDB idb;
    /**
     * Creates new form nyOmrådeschef
     */
    public nyOmrådeschef(InfDB idb) {
        initComponents();
        this.idb = idb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nyOmrådeschefTextField = new javax.swing.JTextField();
        nyOmrådeschefBTN = new javax.swing.JButton();
        tbxBTN = new javax.swing.JButton();
        områdenCombo = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nyOmrådeschefBTN.setText("Ny områdeschef");
        nyOmrådeschefBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nyOmrådeschefBTNActionPerformed(evt);
            }
        });

        tbxBTN.setText("Tillbaka");
        tbxBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxBTNActionPerformed(evt);
            }
        });

        områdenCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Svealand", "Götaland", "Norrland" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(nyOmrådeschefTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(områdenCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113))
            .addGroup(layout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tbxBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nyOmrådeschefBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(184, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nyOmrådeschefTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(områdenCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(nyOmrådeschefBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tbxBTN)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbxBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxBTNActionPerformed
        // TODO add your handling code here:
        AdminFonster tbx = new AdminFonster(idb);
        tbx.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_tbxBTNActionPerformed

    private void nyOmrådeschefBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nyOmrådeschefBTNActionPerformed
        // TODO add your handling code here:
        if(valideringsklass.tomtFalt(nyOmrådeschefTextField)){
            String chefNamn = nyOmrådeschefTextField.getText();
            String område = områdenCombo.getSelectedItem().toString();
            ArrayList<String> agentNamn = new ArrayList<String>();
            int inmatning = JOptionPane.showConfirmDialog(null, "Vill du ändra områdeschef?", "Ändra områdeschef", 2);
            if(inmatning == 0){
            try{
                String id = idb.fetchSingle("Select agent_id from agent where namn = " + "'" + chefNamn + "'");
                int convertId = Integer.parseInt(id);
                
                
                //Fyller arraylisten med namnen från agent tabellen
                agentNamn = idb.fetchColumn("Select Namn from agent where not Agent_id = " + "'" + convertId + "'");
                //Gör det till ett arrayobjekt
                Object[] agentObjekt = agentNamn.toArray();
                

                String isChef = idb.fetchSingle("Select agent_id from omradeschef where agent_id = " + "'" + convertId + "'");
                //Gör agenten till områdeschef för det valda området från combolistan
                if(isChef == null){
                    String områdeId = idb.fetchSingle("Select omrades_id from omrade where benamning =  " + "'" + område + "'" );
                    int convertOmrådeId = Integer.parseInt(områdeId);
                    
                idb.delete("delete from omradeschef where omrade = (select omrades_id from omrade where benamning = '" + område + "')");
                    idb.insert("INSERT INTO OMRADESCHEF VALUES ('" + convertId + "','" + convertOmrådeId + "')"); 
                    JOptionPane.showMessageDialog(null, "Agenten är nu områdeschef för valt område!");
            }
                // ifall agenten redan är områdeschef för ett område så får man välja en ny områdeschef för det området. Koden är av samma princip som koden för att ta bort en agent om agenten var ansvarig för någon alien
                else if(isChef != null){
                      Object nyChef = JOptionPane.showInputDialog(null, "Välj ny Områdeschef", "Agenten är områdeschef för ett område", JOptionPane.QUESTION_MESSAGE, null, agentObjekt, agentObjekt[0]);
                      String nyChefToString = String.valueOf(nyChef);
                      int nyChefId = Integer.parseInt(idb.fetchSingle("Select agent_id from agent where namn = " + "'" + nyChefToString + "'"));
                      String områdeId = idb.fetchSingle("Select omrades_id from omrade where benamning =  " + "'" + område + "'" );
                      int convertOmrådeId = Integer.parseInt(områdeId);
                      
                       String Byte= idb.fetchSingle("SELECT OMRADE FROM OMRADESCHEF WHERE AGENT_ID = " + "'" + convertId + "'");
                       int Convertbyte = Integer.parseInt(Byte);
                       idb.insert("insert into omradeschef values ('" + nyChefId + "','" + Convertbyte + "')");
                       idb.delete("delete from omradeschef where agent_id = " + "'" + convertId + "'");
                       idb.delete("delete from omradeschef where omrade = (select omrades_id from omrade where benamning = '" + område + "')");
                       idb.insert("insert into omradeschef values ('" + convertId + "','" + convertOmrådeId + "')");
                       
                       JOptionPane.showMessageDialog(null, "Nu är agenterna områdeschefer för nya områden");
                       
                       
                      
                      
                }
            
            
            }
            catch(InfException e){
                JOptionPane.showMessageDialog(null, "Framsökt agent kunde inte hittas, dubbelkolla stavningen!");
                System.out.println(e.getMessage());
            
            }
        
        }
        }
    }//GEN-LAST:event_nyOmrådeschefBTNActionPerformed

    /**
     * @param args the command line arguments
     */


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton nyOmrådeschefBTN;
    private javax.swing.JTextField nyOmrådeschefTextField;
    private javax.swing.JComboBox<String> områdenCombo;
    private javax.swing.JButton tbxBTN;
    // End of variables declaration//GEN-END:variables
}
