/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mib1;
import oru.inf.InfDB;
import oru.inf.InfException;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import oru.inf.InfException;

/**
 *
 * @author KarlJ
 */
public class lånaUtrustning extends javax.swing.JFrame {
        private static InfDB idb;
    /**
     * Creates new form lånaUtrustning
     */
    public lånaUtrustning(InfDB idb) {
        initComponents();
        this.idb = idb;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lånaBTN = new javax.swing.JButton();
        tbxBTN = new javax.swing.JButton();
        returnBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lånaBTN.setText("Låna Utrustning");
        lånaBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lånaBTNActionPerformed(evt);
            }
        });

        tbxBTN.setText("Tillbaka");
        tbxBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbxBTNActionPerformed(evt);
            }
        });

        returnBTN.setText("Lämna tillbaka utrustning");
        returnBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lånaBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tbxBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(returnBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(51, 51, 51)
                .addComponent(lånaBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tbxBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lånaBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lånaBTNActionPerformed
        // TODO add your handling code here:
         //Promptar användaren att svara ifall den vill låna fordon
        int inmatning = JOptionPane.showConfirmDialog(null, "Vill du låna utrustning?", "Låna utrustning", 2);
        //Hämtar in dagens datum så att det kan matas in i databasen under utkvitteringsdatum. Utkvitteringsdatum är alltid dagens datum på sättet vi gjort det
        LocalDate date = LocalDate.now();
        //Hämtar inloggad användare med hjälp av hamtaAnvandare metoden från huvudfönster
        String user = huvudFonster.hamtaAnvandare();
        //Skapar en arraylist med all utrustning
        ArrayList<String> utrustning = new ArrayList<String>();
        //0 = att användaren tryck ja på om den vill låna utrustning
        if(inmatning == 0){
            try{
                //Hämtar in utrustningsbenämningen så man vet "namnet" på utrustningen från utrustningstabellen
                 utrustning = idb.fetchColumn("Select benamning from utrustning");
                 //Görs om till ett arrayobjekt
                 Object[] utrustningObjekt = utrustning.toArray();
                 //Användaren får välja vilken utrustning den vill låna 
                 Object valdUtrustning = JOptionPane.showInputDialog(null, "Välj utrustning", "", JOptionPane.QUESTION_MESSAGE, null, utrustningObjekt, utrustningObjekt[0]);
                 //Gör objektet till en string med den valda utrustningen
                 String valdUtrustningToString = String.valueOf(valdUtrustning);
                 //Hämtar agent_id på inloggad användare
                 int convertId = Integer.parseInt(idb.fetchSingle("Select agent_id from agent where namn = " + "'" + user + "'"));
                 // Hämtar utrustnings_id på den utrustning som användaren valt
                 String valtFordonRegnr = idb.fetchSingle("Select utrustnings_id from utrustning where benamning = " + "'" + valdUtrustningToString + "'");
                 // För in värdena in i innehar_utrustning
                idb.insert("INSERT INTO innehar_utrustning VALUES ('" + convertId + "','" + valtFordonRegnr + "','" + date +  "')");
                 
               
                 
            
            }
            catch(InfException e){
            System.out.println(e.getMessage());
             System.out.println(date);
            }
            catch(NullPointerException e){
                System.out.println(e.getMessage());
                System.out.println(date);
            }
        
        }
        
    }//GEN-LAST:event_lånaBTNActionPerformed

    private void tbxBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbxBTNActionPerformed
        // TODO add your handling code here:
               // TODO add your handling code here:
          String test = huvudFonster.hamtaAnvandare();
        //om agenten är admin så kommer man till adminsidan via knappen annars så kommer man till vanliga agentsidan
        try{
            //String namn = idb.fetchSingle("Select namn from agent where namn = " + "'" + test + "'");
            // Här hämtar den id på den inloggade agenten
            String id = idb.fetchSingle("Select agent_id from agent where namn = " + "'" + test + "'");
            // Konverterar till int
            int convertId = Integer.parseInt(id);
            //If agenten är admin 
            String om = idb.fetchSingle("select agent.ADMINISTRATOR from agent where agent_id = " + "'" + convertId +"'");
            //Om villkorret uppfylls(en agent är admin om det står J i administrator kolumnen)
            if(om.equals("J")){
                AdminFonster tbxAdmin = new AdminFonster(idb);
                tbxAdmin.setVisible(true);
                this.dispose();
            }
            // Annars är det vanliga agentsidan man kommer till
            else{
                AgentInloggad1 tbx = new AgentInloggad1(idb);
                tbx.setVisible(true);
                this.dispose();
                 
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Något gick fel");
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_tbxBTNActionPerformed

    private void returnBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBTNActionPerformed
        // TODO add your handling code here:
        int inmatning = JOptionPane.showConfirmDialog(null, "Vill du lämna tillbaka utrustning?", "Lämna utrustning", 2);
        //Hämtar in dagens datum så att det kan matas in i databasen under utkvitteringsdatum. Utkvitteringsdatum är alltid dagens datum på sättet vi gjort det
        LocalDate date = LocalDate.now();
        //Hämtar inloggad användare med hjälp av hamtaAnvandare metoden från huvudfönster
        String user = huvudFonster.hamtaAnvandare();
        //Skapar en arraylist med all utrustning
        ArrayList<String> lånadUtrustning = new ArrayList<String>();
        //0 = att användaren tryck ja på om den vill låna utrustning
        if(inmatning == 0){
            try{
                int convertId = Integer.parseInt(idb.fetchSingle("Select agent_id from agent where namn = " + "'" + user + "'"));
                lånadUtrustning = idb.fetchColumn("Select benamning from utrustning");
                //Görs om till ett arrayobjekt
                 Object[] utrustningObjekt = lånadUtrustning.toArray();
                 Object valdUtrustning = JOptionPane.showInputDialog(null, "Välj utrustning att lämna", "", JOptionPane.QUESTION_MESSAGE, null, utrustningObjekt, utrustningObjekt[0]);
                 String valdUtrustningToString = String.valueOf(valdUtrustning);
                 String valtUtrustningId = idb.fetchSingle("Select utrustnings_id from utrustning where benamning = " + "'" + valdUtrustningToString + "'");
                 String lånad = idb.fetchSingle("select agent_id from innehar_utrustning where utrustnings_id = " + "'" + valtUtrustningId + "'" + "and agent_id = " + "'" + convertId +"'" );
                 
                 if(lånad == null){
                     JOptionPane.showMessageDialog(null, "Du kan ju inte lämna tillbaka något du inte lånar!");
                 }
                 else{
                 idb.delete("Delete from innehar_utrustning where utrustnings_id = " + "'" + valtUtrustningId + "'" + "and agent_id = " + "'" + convertId + "'");
                 JOptionPane.showMessageDialog(null, "Utrustningen har lämnats tillbaka!");
            }
            }
            catch(InfException e ){
                JOptionPane.showMessageDialog(null, "Har du verkligen något att lämna tillbaka?");
                System.out.println(e.getMessage());
            }
        
        }
    }//GEN-LAST:event_returnBTNActionPerformed

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton lånaBTN;
    private javax.swing.JButton returnBTN;
    private javax.swing.JButton tbxBTN;
    // End of variables declaration//GEN-END:variables
}
